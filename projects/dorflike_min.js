var _GameMap_ground_array,_GameMap_wall_array,_GameMap_entity_array,_Pathfinding_instances,_Pathfinding_passability_array,_Pathfinding_getIndex,_ItemCache_all_items,__classPrivateFieldGet=this&&this.__classPrivateFieldGet||function(t,e,i,n){if("a"===i&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===i?n:"a"===i?n.call(t):n?n.value:e.get(t)},__classPrivateFieldSet=this&&this.__classPrivateFieldSet||function(t,e,i,n,s){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!s)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!s:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===n?s.call(t,i):s?s.value=i:e.set(t,i),i};class SpriteHandler{constructor(t){this.img=t}render_sprite(t,e){const i=t*TILE_SIZE,n=e*TILE_SIZE;ctx.drawImage(this.img,i-CAMERA_X,n-CAMERA_Y)}}const IMAGE_PATHS={dorf:"sprites/dorf_clear.png",rock:"sprites/rock.png",bag:"sprites/bag.png",tree:"sprites/tree.png",log:"sprites/log.png",potato_seed:"sprites/potato_seed.png",potato_grown:"sprites/potato_grown.png",potato:"sprites/potato.png",egg:"sprites/egg.png",berry_bush_empty:"sprites/berry_bush_empty.png",berry_bush_full:"sprites/berry_bush_full.png",fruit:"sprites/fruits.png",cow:"sprites/cow.png",chicken:"sprites/chicken.png",dirt:"sprites/dirt.png",dirt2:"sprites/dirt2.png",dirt3:"sprites/dirt3.png",stone:"sprites/stone_ground.png",cliff:"sprites/cliff.png"},LOADED_IMAGES={},ALL_LOADED_SPRITES={};function loadAllImagesAndLaunch(){const t=[];return Object.entries(IMAGE_PATHS).forEach((([e,i])=>{const n=new Image,s=new Promise(((t,s)=>{n.onload=()=>{LOADED_IMAGES[e]=n,t()},n.onerror=()=>s(new Error(`Failed to load image: ${i}`))}));n.src=i,t.push(s)})),Promise.all(t).then((()=>{Object.keys(LOADED_IMAGES).forEach((t=>{ALL_LOADED_SPRITES[t]=new SpriteHandler(LOADED_IMAGES[t])})),gameLoop()}))}const RECIPE_TOKENS={STONE_BLOCKS:{name:"Cut Stone Blocks",items_needed:{stone:1},items_created:{stone_blocks:3}}},WORKSHOP_TOKENS={BLOCK_CUTTER:{name:"Block Cutter",recipes:["STONE_BLOCKS"]}},CROP_TOKENS={POTATO:{name:"Potato",growth_time:1e3,crop_yield:{potato:10}}};class FrameTime{static updateDeltaT(){if(0===FrameTime.last_frame_time)return void(FrameTime.last_frame_time=Date.now());const t=Date.now();t-FrameTime.last_frame_time>FrameTime.maxDelta?FrameTime.deltaTRaw=FrameTime.maxDelta:FrameTime.deltaTRaw=t-FrameTime.last_frame_time,FrameTime.deltaT=FrameTime.deltaTRaw*TIME_FACTOR,FrameTime.last_frame_time=t}}FrameTime.last_frame_time=0,FrameTime.deltaTRaw=0,FrameTime.deltaT=0,FrameTime.maxDelta=50,FrameTime.current_time=0;const MS_IN_DAY=72e3,MS_IN_HOUR=3e3;class GameCalendar{constructor(){this.loose_ms=36e3,this.day=0}update(){this.loose_ms+=FrameTime.deltaT,this.loose_ms>=72e3&&(this.loose_ms-=72e3,this.day++)}print_readable_text(){const t=Math.floor(this.loose_ms/3e3),e=Math.floor(this.loose_ms%3e3/3e3*60),i=String(t).padStart(2,"0"),n=String(e).padStart(2,"0");$("#calendar").text(i+":"+n)}calculateNightAlpha(){const t=this.loose_ms/3e3;return t>=20||t<4?.6:t>=4&&t<8?.6*(1-(t-4)/4):t>=8&&t<16?0:t>=16&&t<20?(t-16)/4*.6:0}render_overlay(){const t=this.calculateNightAlpha();ctx.fillStyle=`rgba(0, 0, 30, ${t})`,ctx.fillRect(0,0,canvas.width,canvas.height)}}const CALENDAR=new GameCalendar;function ugly_print(t){}function generateCircleCoordinates(t){const e=[];for(let i=-t;i<=t;i++)for(let n=-t;n<=t;n++)i*i+n*n<=t*t&&e.push({x:i,y:n,distance:Math.sqrt(i*i+n*n)});return e.sort(((t,e)=>t.distance-e.distance))}function isValidGridCoordinate(t,e){return!(t<0||t>=GRID_WIDTH||e<0||e>=GRID_HEIGHT)}function getHashSetOfReservedTiles(){const t=new Set;for(const e of CHARACTERS)for(const i of e.itinerary.task_list){!("GO_TO"==i.task_key||null===i.x||null===i.y)&&t.add(i.x+" "+i.y)}return t}function path_array_to_tasks(t){const e=[];for(const i of t)e.push(new DwarvenTask("GO_TO",i.x,i.y));return e}function getGridTilesBetween(t,e,i,n){const s=[];t>i&&([t,i]=[i,t]),e>n&&([e,n]=[n,e]);for(let r=t;r<=i;r++)for(let t=e;t<=n;t++)s.push(new Tile2D(r,t));return s}function getRandomNumberBetween(t,e){const i=Math.min(t,e),n=Math.max(t,e);return Math.floor(Math.random()*(n-i+1))+i}function deterministicRandom(t,e){let i=t.toString(),n=0;for(let t=0;t<i.length;t++){n=(n<<5)-n+i.charCodeAt(t),n&=n}return n=Math.abs(n),n%e+1}function getRandomElement(t){if(0===t.length)return;return t[Math.floor(Math.random()*t.length)]}function chooseNRandomElements(t,e){if(!Array.isArray(t)||0===t.length)throw new Error("Source array must be a non-empty array");if("number"!=typeof e||e<=0||e>t.length||!Number.isInteger(e))throw new Error(`'n' must be an integer such that 1 ≤ n ≤ ${t.length}. Got: ${e}`);const i=t.slice();for(let t=0;t<e;t++){const e=t+Math.floor(Math.random()*(i.length-t));[i[t],i[e]]=[i[e],i[t]]}return i.slice(0,e)}function prettify(t){return t.replace(/_/g," ").split(" ").map((t=>t.charAt(0).toUpperCase()+t.slice(1).toLowerCase())).join(" ")}class Tile2D{constructor(t,e){this.x=t,this.y=e}isValid(){return this.x>=0&&this.x<GRID_WIDTH&&this.y>=0&&this.y<GRID_HEIGHT}static addTwoTiles(t,e){return new Tile2D(t.x+e.x,t.y+e.y)}getNeighbors(){const t=[];for(const e of CARDINAL_DIRECTIONS){const i=Tile2D.addTwoTiles(this,e);i.isValid()&&t.push(i)}return t}get_hash(){return this.x+" "+this.y}}const TILE_SIZE=32,GRID_WIDTH=250,GRID_HEIGHT=250,CANVAS_HEIGHT=window.screen.height-250,CANVAS_WIDTH=window.screen.width-100,CARDINAL_DIRECTIONS=[new Tile2D(0,1),new Tile2D(1,0),new Tile2D(0,-1),new Tile2D(-1,0)],DIRECTIONS=[{x:0,y:-1},{x:1,y:-1},{x:1,y:0},{x:1,y:1},{x:0,y:1},{x:-1,y:1},{x:-1,y:0},{x:-1,y:-1}];class PerlinNoise{constructor(){this.p=new Array(512),this.generatePermutation()}generatePermutation(){const t=Array.from({length:256},((t,e)=>e));for(let e=t.length-1;e>0;e--){const i=Math.floor(getRand()*(e+1));[t[e],t[i]]=[t[i],t[e]]}for(let e=0;e<512;e++)this.p[e]=t[e%256]}noise(t,e){const i=255&Math.floor(t),n=255&Math.floor(e);t-=Math.floor(t),e-=Math.floor(e);const s=this.fade(t),r=this.fade(e),a=this.p[i]+n,o=this.p[i+1]+n;return this.lerp(r,this.lerp(s,this.grad(this.p[a],t,e),this.grad(this.p[o],t-1,e)),this.lerp(s,this.grad(this.p[a+1],t,e-1),this.grad(this.p[o+1],t-1,e-1)))}fade(t){return t*t*t*(t*(6*t-15)+10)}lerp(t,e,i){return e+t*(i-e)}grad(t,e,i){switch(3&t){case 0:return e+i;case 1:return-e+i;case 2:return e-i;case 3:return-e-i;default:return 0}}}var SEED=3;function getRand(){const t=1e4*Math.sin(SEED++);return t-Math.floor(t)}const PEOPLE_NAMES=["Aelfric","Baldric","Cedric","Dunstan","Eadmund","Godric","Hereward","Leofric","Oswald","Wulfstan","Aldhelm","Beowulf","Cerdic","Drystan","Egbert","Gawain","Hrothgar","Leofwine","Osric","Wilfred","Aeneas","Brutus","Claudius","Darius","Ezra","Gideon","Horatio","Lucius","Orion","Thaddeus","Aelfgifu","Bertha","Cynethryth","Dorothea","Edith","Frideswide","Gunnhild","Hilda","Isolde","Judith","Kenelswith","Leofflæd","Mildred","Nesta","Osburh","Prudence","Quendreda","Rowena","Selah","Theodora","Aethelthryth","Beatrice","Constance","Damaris","Elspeth","Fides","Gwendolyn","Helena","Iphigenia","Jezebel"];class GameMap{constructor(){_GameMap_ground_array.set(this,Array(GRID_HEIGHT).fill(null).map((()=>Array(GRID_WIDTH).fill("dirt")))),_GameMap_wall_array.set(this,Array(GRID_HEIGHT).fill(null).map((()=>Array(GRID_WIDTH).fill(null)))),_GameMap_entity_array.set(this,Array(GRID_HEIGHT).fill(null).map((()=>Array(GRID_WIDTH).fill(null)))),this.generatePerlinTerrain(GRID_WIDTH,GRID_HEIGHT)}generatePerlinTerrain(t,e,i=128,n=1){const s=[new PerlinNoise,new PerlinNoise,new PerlinNoise],r=1/i;for(let i=0;i<e;i++)for(let e=0;e<t;e++){let t=0;const n=[1,.5,.25],a=[r,2*r,4*r];for(let r=0;r<3;r++){const o=e*a[r],l=i*a[r];t+=s[r].noise(o,l)*n[r]}t<-.3?__classPrivateFieldGet(this,_GameMap_ground_array,"f")[i][e]="deep_water":t<-.25?__classPrivateFieldGet(this,_GameMap_ground_array,"f")[i][e]="water":t<-.05?__classPrivateFieldGet(this,_GameMap_ground_array,"f")[i][e]="mud":t<.28?__classPrivateFieldGet(this,_GameMap_ground_array,"f")[i][e]="dirt":t<.35?__classPrivateFieldGet(this,_GameMap_ground_array,"f")[i][e]="stone":(__classPrivateFieldGet(this,_GameMap_ground_array,"f")[i][e]="stone",__classPrivateFieldGet(this,_GameMap_wall_array,"f")[i][e]="cliff")}for(let i=0;i<e;i++)for(let e=0;e<t;e++){const t=this.isValidLocationForTree(e,i),n=getRand();t&&n>.95&&this.setEntity(e,i,new TreeEntity)}for(let i=0;i<e;i++)for(let e=0;e<t;e++){const t=this.isValidLocationForTree(e,i),n=getRand();t&&n>.99&&this.setEntity(e,i,new BerryBushEntity)}}isValidLocationForTree(t,e){const i=[[-1,-1],[-1,0],[-1,1],[0,-1],[0,1],[1,-1],[1,0],[1,1]];if(null!==this.getEntity(t,e))return!1;if("dirt"!=this.getTile(t,e))return!1;for(const[n,s]of i){const i=t+n,r=e+s;if(i<0||i>=GRID_WIDTH||r<0||r>=GRID_HEIGHT)continue;const a=this.getEntity(i,r);if(a instanceof TreeEntity||a instanceof BerryBushEntity)return!1}return!0}getTile(t,e){return __classPrivateFieldGet(this,_GameMap_ground_array,"f")[e][t]}getWall(t,e){return __classPrivateFieldGet(this,_GameMap_wall_array,"f")[e][t]}getEntity(t,e){return __classPrivateFieldGet(this,_GameMap_entity_array,"f")[e][t]}setTile(t,e,i){t>=0&&e<GRID_WIDTH&&e>=0&&e<GRID_HEIGHT&&(__classPrivateFieldGet(this,_GameMap_ground_array,"f")[e][t]=i)}setWall(t,e,i){t>=0&&e<GRID_WIDTH&&e>=0&&e<GRID_HEIGHT&&(__classPrivateFieldGet(this,_GameMap_wall_array,"f")[e][t]=i)}setEntity(t,e,i){isValidGridCoordinate(t,e)&&(__classPrivateFieldGet(this,_GameMap_entity_array,"f")[e][t]=i)}getCostToMoveThroughTile(t,e){return null!==__classPrivateFieldGet(this,_GameMap_wall_array,"f")[e][t]?1/0:ALL_TILES[this.getTile(t,e)].cost}get_closest_tile_of_type(t,e,i){let n=null,s=1/0;for(let r=0;r<__classPrivateFieldGet(this,_GameMap_ground_array,"f").length;r++)for(let a=0;a<__classPrivateFieldGet(this,_GameMap_ground_array,"f")[r].length;a++)if(__classPrivateFieldGet(this,_GameMap_ground_array,"f")[r][a]===i){const i=PATHFINDING.heuristic(t,e,a,r);i<s&&(s=i,n={x:a,y:r})}return n?PATHFINDING.findPath(t,e,n.x,n.y):null}getAllEntitiesAsWrappedArray(){const t=[];for(let e=0;e<GRID_HEIGHT;e++)for(let i=0;i<GRID_WIDTH;i++)__classPrivateFieldGet(this,_GameMap_entity_array,"f")[e][i]&&t.push({entity:__classPrivateFieldGet(this,_GameMap_entity_array,"f")[e][i],x:i,y:e});return t}getEntityWhereFn(t){const e=[];for(let i=0;i<GRID_HEIGHT;i++)for(let n=0;n<GRID_WIDTH;n++){const s=__classPrivateFieldGet(this,_GameMap_entity_array,"f")[i][n];null!==s&&t(s)&&e.push({entity:s,x:n,y:i})}return e}getItemViaItsKey(t){return this.getEntityWhereFn((function(e){return e instanceof ItemOnGround&&e.item_id==t}))}getItemsNotInStockpiles(){return this.getAllEntitiesAsWrappedArray().filter((t=>t.entity instanceof ItemOnGround&&!ZONE_MANAGER.grid_location_is_stockpile(t.x,t.y)))}getClosestFoodItem(t,e){const i=["potato","egg","fruit"],n=this.getAllEntitiesAsWrappedArray().filter((t=>t.entity instanceof ItemOnGround&&i.includes(t.entity.item_id)));n.sort(((i,n)=>Math.abs(i.x-t)+Math.abs(i.y-e)-(Math.abs(n.x-t)+Math.abs(n.y-e))));for(const i of n){const n=PATHFINDING.findPath(t,e,i.x,i.y);if(n)return n}return null}dump_inventory(t,e,i){const n=i.give_list_of_items_held();for(const i in n){const s=n[i];this.dump_one_inventory_item(t,e,i,s)}i.makeEmpty()}dump_one_inventory_item(t,e,i,n){const s=generateCircleCoordinates(4);let r=0;for(;r<s.length;){const a=s[r],o=t+a.x,l=e+a.y;if(!isValidGridCoordinate(o,l)){r++;continue}if(null===this.getEntity(o,l))return void this.setEntity(o,l,new ItemOnGround(i,n));r++}}update_all_entities(){for(let t=0;t<GRID_HEIGHT;t++)for(let e=0;e<GRID_WIDTH;e++){const i=__classPrivateFieldGet(this,_GameMap_entity_array,"f")[t][e];null!==i&&i.frame_update(e,t)}}isWalkable(t,e){if(t<0||t>=GRID_WIDTH||e<0||e>=GRID_HEIGHT)return!1;return ALL_TILES[__classPrivateFieldGet(this,_GameMap_ground_array,"f")[e][t]].cost!==1/0&&null===__classPrivateFieldGet(this,_GameMap_wall_array,"f")[e][t]}render_single_tile(t,e){const i=__classPrivateFieldGet(this,_GameMap_ground_array,"f")[e][t],n=__classPrivateFieldGet(this,_GameMap_wall_array,"f")[e][t];if("dirt"==i){const i=deterministicRandom(e+" "+t,3);let n=ALL_LOADED_SPRITES.dirt;2==i?n=ALL_LOADED_SPRITES.dirt2:3==i&&(n=ALL_LOADED_SPRITES.dirt3),n.render_sprite(t,e)}else"stone"==i?ALL_LOADED_SPRITES.stone.render_sprite(t,e):(ctx.fillStyle=ALL_TILES[i].color,ctx.fillRect(t*TILE_SIZE-CAMERA_X,e*TILE_SIZE-CAMERA_Y,TILE_SIZE,TILE_SIZE));n&&("cliff"==n?ALL_LOADED_SPRITES.cliff.render_sprite(t,e):(ctx.fillStyle=ALL_WALLS[n].color,ctx.fillRect(t*TILE_SIZE-CAMERA_X,e*TILE_SIZE-CAMERA_Y,TILE_SIZE,TILE_SIZE)))}render_tiles(){const t=Math.floor(CAMERA_X/TILE_SIZE),e=Math.floor(CAMERA_Y/TILE_SIZE),i=Math.min(Math.ceil((CAMERA_X+CANVAS_WIDTH)/TILE_SIZE),GRID_WIDTH),n=Math.min(Math.ceil((CAMERA_Y+CANVAS_HEIGHT)/TILE_SIZE),GRID_HEIGHT);for(let s=e;s<n;s++)for(let e=t;e<i;e++)this.render_single_tile(e,s)}render_entities(){for(let t=0;t<GRID_HEIGHT;t++)for(let e=0;e<GRID_WIDTH;e++){const i=__classPrivateFieldGet(this,_GameMap_entity_array,"f")[t][e];null!=i&&i.draw(e,t)}}}_GameMap_ground_array=new WeakMap,_GameMap_wall_array=new WeakMap,_GameMap_entity_array=new WeakMap;class Pathfinding{constructor(){_Pathfinding_instances.add(this),_Pathfinding_passability_array.set(this,new Int32Array(GRID_WIDTH*GRID_HEIGHT)),__classPrivateFieldGet(this,_Pathfinding_passability_array,"f").fill(0)}populate_passibility_array(){let t=1;__classPrivateFieldGet(this,_Pathfinding_passability_array,"f").fill(0);for(let t=0;t<GRID_HEIGHT;t++)for(let e=0;e<GRID_WIDTH;e++)null!==GAME_MAP.getWall(e,t)&&(__classPrivateFieldGet(this,_Pathfinding_passability_array,"f")[__classPrivateFieldGet(this,_Pathfinding_instances,"m",_Pathfinding_getIndex).call(this,e,t)]=-1);for(let e=0;e<GRID_HEIGHT;e++)for(let i=0;i<GRID_WIDTH;i++){const n=__classPrivateFieldGet(this,_Pathfinding_instances,"m",_Pathfinding_getIndex).call(this,i,e);0===__classPrivateFieldGet(this,_Pathfinding_passability_array,"f")[n]&&(this.scanline_flood_fill(i,e,t),t++)}}scanline_flood_fill(t,e,i){const n=[{x:t,y:e}];for(;n.length>0;){const{x:t,y:e}=n.pop();let s=t;for(;s>=0&&0===__classPrivateFieldGet(this,_Pathfinding_passability_array,"f")[__classPrivateFieldGet(this,_Pathfinding_instances,"m",_Pathfinding_getIndex).call(this,s,e)];)s--;s++;let r=t;for(;r<GRID_WIDTH&&0===__classPrivateFieldGet(this,_Pathfinding_passability_array,"f")[__classPrivateFieldGet(this,_Pathfinding_instances,"m",_Pathfinding_getIndex).call(this,r,e)];)r++;r--;for(let t=s;t<=r;t++){if(__classPrivateFieldGet(this,_Pathfinding_passability_array,"f")[__classPrivateFieldGet(this,_Pathfinding_instances,"m",_Pathfinding_getIndex).call(this,t,e)]=i,e>0){const i=__classPrivateFieldGet(this,_Pathfinding_instances,"m",_Pathfinding_getIndex).call(this,t,e-1);0===__classPrivateFieldGet(this,_Pathfinding_passability_array,"f")[i]&&n.push({x:t,y:e-1})}if(e<GRID_HEIGHT-1){const i=__classPrivateFieldGet(this,_Pathfinding_instances,"m",_Pathfinding_getIndex).call(this,t,e+1);0===__classPrivateFieldGet(this,_Pathfinding_passability_array,"f")[i]&&n.push({x:t,y:e+1})}}}}are_two_tiles_in_the_same_pathing_region(t,e,i,n){if(!isValidGridCoordinate(t,e)||!isValidGridCoordinate(i,n))return!1;const s=__classPrivateFieldGet(this,_Pathfinding_passability_array,"f")[__classPrivateFieldGet(this,_Pathfinding_instances,"m",_Pathfinding_getIndex).call(this,t,e)],r=__classPrivateFieldGet(this,_Pathfinding_passability_array,"f")[__classPrivateFieldGet(this,_Pathfinding_instances,"m",_Pathfinding_getIndex).call(this,i,n)];return-1!==s&&-1!==r&&s===r}findPathExtended(t,e,i,n,s=!1){if(s){let s=null,r=1/0;for(const a of CARDINAL_DIRECTIONS){const o=i+a.x,l=n+a.y,_=this.findPath(t,e,o,l);_&&_.length<r&&(s=_,r=_.length)}return s}return this.findPath(t,e,i,n)}findPath(t,e,i,n){if(!this.are_two_tiles_in_the_same_pathing_region(t,e,i,n))return null;const s=[{x:t,y:e,g:0,f:this.heuristic(t,e,i,n)}],r=new Set,a=new Map;for(;s.length>0;){s.sort(((t,e)=>t.f-e.f));const t=s.shift();if(t.x===i&&t.y===n){const t=[];let e={x:i,y:n};for(;a.has(`${e.x},${e.y}`);)t.unshift(e),e=a.get(`${e.x},${e.y}`);return t}r.add(`${t.x},${t.y}`);for(const e of this.getNeighbors(t.x,t.y)){if(r.has(`${e.x},${e.y}`))continue;const o=t.g+e.cost,l=s.find((t=>t.x===e.x&&t.y===e.y));l?o<l.g&&(l.g=o,l.f=o+this.heuristic(e.x,e.y,i,n),a.set(`${e.x},${e.y}`,{x:t.x,y:t.y})):(s.push({x:e.x,y:e.y,g:o,f:o+this.heuristic(e.x,e.y,i,n)}),a.set(`${e.x},${e.y}`,{x:t.x,y:t.y}))}}return null}heuristic(t,e,i,n){return Math.sqrt(Math.pow(t-i,2)+Math.pow(e-n,2))}getNeighbors(t,e){const i=[];for(const[n,s]of[[0,1],[1,0],[0,-1],[-1,0]]){const r=t+n,a=e+s;if(!(r>=0&&r<GRID_WIDTH&&a>=0&&a<GRID_HEIGHT))continue;const o=GAME_MAP.getCostToMoveThroughTile(r,a);o!==1/0&&i.push({x:r,y:a,cost:o})}for(const[n,s]of[[1,1],[1,-1],[-1,-1],[-1,1]]){const r=t+n,a=e+s;if(!(r>=0&&r<GRID_WIDTH&&a>=0&&a<GRID_HEIGHT))continue;const o=GAME_MAP.getCostToMoveThroughTile(r,a);if(o!==1/0){if(GAME_MAP.isWalkable(t+n,e)||GAME_MAP.isWalkable(t,e+s)){const t=o*Math.SQRT2;i.push({x:r,y:a,cost:t})}}}return i}}_Pathfinding_passability_array=new WeakMap,_Pathfinding_instances=new WeakSet,_Pathfinding_getIndex=function(t,e){return e*GRID_WIDTH+t};class PathNode{constructor(t,e,i=0,n=0){this.x=t,this.y=e,this.g=i,this.f=i+n}getKey(){return`${this.x},${this.y}`}static fromCoords(t,e){return new PathNode(t,e)}}class Tile{constructor(t,e=1){this.color=t,this.cost=e}}var ALL_TILES={dirt:new Tile("#228b22",1),water:new Tile("#4169E1",1),deep_water:new Tile("#1d3270",1/0),mud:new Tile("#654321",1),stone:new Tile("#8d9091",1)};class GameEntity{constructor(){this.is_deconstructable=!1,this.is_harvestable=!1,this.is_choppable=!1}frame_update(t,e){}draw(t,e){}render_details_menu(){return $("<div>")}}class TreeEntity extends GameEntity{constructor(){super(),this.is_choppable=!0}draw(t,e){ALL_LOADED_SPRITES.tree.render_sprite(t,e)}}class CropEntity extends GameEntity{constructor(t){super(),this.crop_type=t,this.growth=0}frame_update(t,e){this.growth+=FrameTime.deltaT,this.growth>this.get_plant_data().growth_time&&(this.is_harvestable=!0)}get_plant_data(){return CROP_TOKENS[this.crop_type]}draw(t,e){this.is_harvestable?ALL_LOADED_SPRITES.potato_grown.render_sprite(t,e):ALL_LOADED_SPRITES.potato_seed.render_sprite(t,e)}}class ItemOnGround extends GameEntity{constructor(t,e){super(),this.item_id=t,this.item_count=e}draw(t,e){let i="bag";"stone"==this.item_id&&(i="rock"),"log"==this.item_id&&(i="log"),"potato"==this.item_id&&(i="potato"),"fruit"==this.item_id&&(i="fruit"),"egg"==this.item_id&&(i="egg"),ALL_LOADED_SPRITES[i].render_sprite(t,e)}}class BedEntity extends GameEntity{constructor(t,e){super(),this.is_deconstructable=!0}draw(t,e){ctx.fillStyle="brown",ctx.fillRect(t*TILE_SIZE+3-CAMERA_X,e*TILE_SIZE+3-CAMERA_Y,TILE_SIZE-6,TILE_SIZE-6)}}class DoorEntity extends GameEntity{constructor(){super(),this.is_deconstructable=!0}draw(t,e){ctx.fillStyle="brown",ctx.fillRect(t*TILE_SIZE+8-CAMERA_X,e*TILE_SIZE+8-CAMERA_Y,TILE_SIZE-16,TILE_SIZE-16)}}const TIME_TO_GROW_BERRIES=1e4;class BerryBushEntity extends GameEntity{constructor(){super(),this.growth=6500*Math.random(),this.is_choppable=!0,this.is_harvestable=!1}frame_update(t,e){this.growth+=FrameTime.deltaT,this.growth>=1e4&&(this.is_harvestable=!0)}draw(t,e){const i=this.growth>=1e4?"berry_bush_full":"berry_bush_empty";ALL_LOADED_SPRITES[i].render_sprite(t,e)}}class WorkShopEntity extends GameEntity{constructor(t){super(),this.workshop_token=t,this.craft_orders=[],this.is_deconstructable=!0}draw(t,e){ctx.fillStyle="purple",ctx.fillRect(t*TILE_SIZE+3-CAMERA_X,e*TILE_SIZE+3-CAMERA_Y,TILE_SIZE-6,TILE_SIZE-6)}append_craft_order(t){this.craft_orders.push(t)}render_details_menu(){const t=$("<div>"),e=WORKSHOP_TOKENS[this.workshop_token].recipes;for(const i of e){const e=RECIPE_TOKENS[i],n=(e.name,$("<button>").text(e.name).attr("recipe_token",i)),s=this;n.click((function(){s.craft_orders.push(new CraftOrder(i))})),t.append($("<br>"),$("<br>"),n,$("<br>"))}return t}frame_update(t,e){this.craft_orders.length&&BLUEPRINT_MANAGER.addBluePrint(new Blueprint(t,e,"C_generic",this.craft_orders[0].recipe_key))&&this.craft_orders.shift()}}class CraftOrder{constructor(t){this.recipe_key=t}}class Wall{constructor(t,e){this.color=t,this.cost=e}}var ALL_WALLS={wood_wall:new Wall("#5C4033",{log:1}),stone_block_wall:new Wall("#8c98a1",{}),cliff:new Wall("#5f6169",{})};const MAX_SIZE_OF_ROOM=400;class IndoorRegions{constructor(){this.gridSize=GRID_WIDTH*GRID_HEIGHT,this.grid=new Uint8Array(this.gridSize)}toIndex(t,e){return e*GRID_WIDTH+t}toCoordinates(t){return[t%GRID_WIDTH,Math.floor(t/GRID_WIDTH)]}update_state(){this.grid.fill(0);const t=new Uint8Array(this.gridSize),e=[];for(let i=0;i<this.gridSize;i++){const[n,s]=this.toCoordinates(i);if(!t[i]&&!this.is_wall(n,s)){const i=this.floodFill(n,s,t);i.length>0&&e.push(i)}}for(const t of e)if(t.length<400)for(const e of t)this.grid[e]=1}floodFill(t,e,i){const n=[],s=new Int32Array(this.gridSize);let r=0,a=1;const o=this.toIndex(t,e);s[0]=o,i[o]=1;let l=!1;const _=[1,GRID_WIDTH,-1,-GRID_WIDTH];for(;r<a;){const t=s[r++];n.push(t);const[e,o]=this.toCoordinates(t);for(const n of _){const r=t+n,_=e+(1===n?1:-1===n?-1:0),h=o+(n===GRID_WIDTH?1:n===-GRID_WIDTH?-1:0);_<0||_>=GRID_WIDTH||h<0||h>=GRID_HEIGHT?l=!0:i[r]||this.is_wall(_,h)||(s[a++]=r,i[r]=1)}}return l?[]:n}is_wall(t,e){const i=GAME_MAP.getWall(t,e),n=GAME_MAP.getEntity(t,e);return null!=i||n instanceof DoorEntity}draw(){ctx.fillStyle="rgba(0,0,0, .25)";for(let t=0;t<this.gridSize;t++)if(this.grid[t]){const[e,i]=this.toCoordinates(t);ctx.fillRect(e*TILE_SIZE-CAMERA_X,i*TILE_SIZE-CAMERA_Y,TILE_SIZE,TILE_SIZE)}}}const INDOOR_REGIONS=new IndoorRegions;class ItemCache{constructor(){_ItemCache_all_items.set(this,[])}buildCache(){__classPrivateFieldSet(this,_ItemCache_all_items,GAME_MAP.getEntityWhereFn((t=>t instanceof ItemOnGround)),"f")}getAllByKey(t){return __classPrivateFieldGet(this,_ItemCache_all_items,"f").filter((e=>e.entity.item_id==t))}}_ItemCache_all_items=new WeakMap;const TOKEN_TO_DESIRED_INVENTORY={T_wooden_wall:{log:1},BE_bed:{log:1},BE_blockcutter:{log:3},BE_door:{log:1}},TOKEN_TO_TILE={T_wooden_wall:"wood_wall"},TASKS_AFTER_ITEM_DELIVERY={T_wooden_wall:"BUILD",BE_bed:"BUILD_ENTITY",BE_blockcutter:"BUILD_ENTITY",BE_door:"BUILD_ENTITY",W_chop:"CHOP_WOOD",W_mine:"CHOP_WOOD",W_harvest:"CHOP_WOOD",W_deconstruct:"CHOP_WOOD",W_plant:"CHOP_WOOD",C_generic:"CRAFT"},PATH_TO_ADJACENT_SET=new Set(["W_chop","W_mine","W_deconstruct","T_wooden_wall"]);class Blueprint{constructor(t,e,i,n=null,s=null){this.x=t,this.y=e,this.bp_str_token=i,this.bp_str_sub_token=n,this.inventory=new ItemSet,this.desired_inventory=n?RECIPE_TOKENS[n].items_needed:i in TOKEN_TO_DESIRED_INVENTORY?TOKEN_TO_DESIRED_INVENTORY[i]:null}getKey(){return this.x+" "+this.y}is_invalidated(){const t=Blueprint.INVALIDATION_HANDLERS[this.bp_str_token];return t?this[t]():!this.bp_str_token.startsWith("BE_")||this.validateBuildingEntity()}validateChop(){const t=GAME_MAP.getEntity(this.x,this.y);return!t||!t.is_choppable}validateMine(){return"cliff"!==GAME_MAP.getWall(this.x,this.y)}validateHarvest(){const t=GAME_MAP.getEntity(this.x,this.y);return!t||!t.is_harvestable}validateDeconstruct(){const t=GAME_MAP.getWall(this.x,this.y),e=GAME_MAP.getEntity(this.x,this.y),i=t&&"cliff"!==t,n=e&&e.is_deconstructable;return!i&&!n}validateHaul(){return!(GAME_MAP.getEntity(this.x,this.y)instanceof ItemOnGround)}validateWoodenWall(){return null!==GAME_MAP.getWall(this.x,this.y)}validateStockpile(){return!!GAME_MAP.getEntity(this.x,this.y)||!ZONE_MANAGER.grid_location_is_stockpile(this.x,this.y)}validateBuildingEntity(){return null!==GAME_MAP.getEntity(this.x,this.y)}validateNull(){return!1}have_dwarf_finish_blueprint(){const t=Blueprint.COMPLETION_HANDLERS[this.bp_str_token];t?this[t]():this.bp_str_token.startsWith("T")&&this.handleTileCompletion(),BLUEPRINT_MANAGER.remove_blueprint_by_key(this.getKey())}handleChopCompletion(){if(GAME_MAP.getEntity(this.x,this.y).is_choppable){GAME_MAP.setEntity(this.x,this.y,null);const t=Math.floor(6*Math.random())+1;for(let e=0;e<t;e++)GAME_MAP.dump_one_inventory_item(this.x,this.y,"log",1)}}handleMineCompletion(){"cliff"==GAME_MAP.getWall(this.x,this.y)&&(GAME_MAP.setWall(this.x,this.y,null),Math.random()>.66&&GAME_MAP.dump_one_inventory_item(this.x,this.y,"stone",1))}handleHarvestCompletion(){const t=GAME_MAP.getEntity(this.x,this.y);if(t instanceof CropEntity){const e=t.get_plant_data();GAME_MAP.setEntity(this.x,this.y,null);for(const t in e.crop_yield){const i=e.crop_yield[t];GAME_MAP.dump_one_inventory_item(this.x,this.y,t,i)}}else t instanceof BerryBushEntity&&(t.growth=0,t.is_harvestable=!1,GAME_MAP.dump_one_inventory_item(this.x,this.y,"fruit",6))}handleDeconstructCompletion(){if(null!==GAME_MAP.getWall(this.x,this.y)){const t=ALL_WALLS[GAME_MAP.getWall(this.x,this.y)].cost;for(const e in t){const i=t[e];GAME_MAP.dump_one_inventory_item(this.x,this.y,e,i)}GAME_MAP.setWall(this.x,this.y,null)}const t=GAME_MAP.getEntity(this.x,this.y);t&&t.is_deconstructable&&GAME_MAP.setEntity(this.x,this.y,null)}handlePlantCompletion(){null==GAME_MAP.getEntity(this.x,this.y)&&GAME_MAP.setEntity(this.x,this.y,new CropEntity("POTATO"))}handleGenericCraftCompletion(){const t=RECIPE_TOKENS[this.bp_str_sub_token].items_created;for(const e in t)GAME_MAP.dump_one_inventory_item(this.x,this.y,e,t[e])}handleBlockcutterCompletion(){GAME_MAP.setEntity(this.x,this.y,new WorkShopEntity("BLOCK_CUTTER"))}handleBedCompletion(){GAME_MAP.setEntity(this.x,this.y,new BedEntity(this.x,this.y))}handleDoorCompletion(){GAME_MAP.setEntity(this.x,this.y,new DoorEntity)}handleTileCompletion(){GAME_MAP.setWall(this.x,this.y,TOKEN_TO_TILE[this.bp_str_token])}BuildItineraryForDwarf(t){return["W_chop","W_mine","W_harvest","W_deconstruct","W_plant"].includes(this.bp_str_token)?this.BuildItineraryForDwarfSimpleBlueprint(t):["T_wooden_wall","C_generic","BE_bed","BE_blockcutter","BE_door"].includes(this.bp_str_token)?this.BuildItineraryForDwarfDeliveryBlueprint(t):"W_stockpile"==this.bp_str_token?this.BuildItineraryForStockpile(t):"W_haul"==this.bp_str_token?this.BuildItineraryForHaul(t):null}BuildItineraryForDwarfSimpleBlueprint(t){const e=PATHFINDING.findPathExtended(t.x,t.y,this.x,this.y,this.can_path_to_adjactent());if(!e)return null;const i=path_array_to_tasks(e);return i.push(new DwarvenTask(TASKS_AFTER_ITEM_DELIVERY[this.bp_str_token],this.x,this.y)),i}BuildItineraryForDwarfDeliveryBlueprint(t){const e=this.getFirstItemRequired();if(!e)return this.BuildItineraryForDwarfSimpleBlueprint(t);const i=this.getPathToClosestIntanceOfItem(e);if(!i)return null;const n=PATHFINDING.findPathExtended(t.x,t.y,i.x,i.y);if(!n)return null;let s=path_array_to_tasks(n);return s.push(new DwarvenTask("PICKUP",i.x,i.y)),s=s.concat(path_array_to_tasks(i.path_to_bp)),s.push(new DwarvenTask("STOCK_BLUEPRINT",this.x,this.y)),s}BuildItineraryForStockpile(t){const e=GAME_MAP.getItemsNotInStockpiles(),i=getHashSetOfReservedTiles(),n=[];for(const t of e)i.has(t.x+" "+t.y)||n.push(t);const s=n.sort(((t,e)=>Math.abs(t.x-this.x)+Math.abs(t.y-this.y)-(Math.abs(e.x-this.x)+Math.abs(e.y-this.y))));for(const e of s){const i=PATHFINDING.findPath(t.x,t.y,e.x,e.y),n=PATHFINDING.findPath(e.x,e.y,this.x,this.y);if(i&&n){let t=path_array_to_tasks(i);return t.push(new DwarvenTask("PICKUP",e.x,e.y)),t=[...t,...path_array_to_tasks(n)],t.push(new DwarvenTask("DUMP",this.x,this.y)),t}}return null}BuildItineraryForHaul(t){const e=ZONE_MANAGER.getClosestEmptyStockpileLocations(this.x,this.y);if(!e)return null;const i=PATHFINDING.findPath(t.x,t.y,this.x,this.y),n=PATHFINDING.findPath(this.x,this.y,e.x,e.y);if(!i||!n)return null;let s=path_array_to_tasks(i);return s.push(new DwarvenTask("PICKUP_AND_FORGET_BLUEPRINT",this.x,this.y)),s=s.concat(path_array_to_tasks(n)),s.push(new DwarvenTask("DUMP",e.x,e.y)),s}getFirstItemRequired(){const t=this.inventory.getShoppingList(this.desired_inventory);return Object.keys(t).length?Object.keys(t)[0]:null}getPathToClosestIntanceOfItem(t){const e=getHashSetOfReservedTiles(),i=ITEM_CACHE.getAllByKey(t);if(0==i.length)return null;for(const t of i){if(e.has(t.x+" "+t.y))continue;const i=PATHFINDING.findPathExtended(t.x,t.y,this.x,this.y,this.can_path_to_adjactent());if(i)return{x:t.x,y:t.y,path_to_bp:i}}return null}can_path_to_adjactent(){return PATH_TO_ADJACENT_SET.has(this.bp_str_token)}draw(){ctx.fillStyle="rgba(165,165,165, .5)",ctx.fillRect(this.x*TILE_SIZE+3-CAMERA_X,this.y*TILE_SIZE+3-CAMERA_Y,TILE_SIZE-6,TILE_SIZE-6)}}Blueprint.INVALIDATION_HANDLERS={W_chop:"validateChop",W_mine:"validateMine",W_harvest:"validateHarvest",W_deconstruct:"validateDeconstruct",W_haul:"validateHaul",T_wooden_wall:"validateWoodenWall",W_stockpile:"validateStockpile",W_plant:"validateNull",C_generic:"validateNull"},Blueprint.COMPLETION_HANDLERS={W_chop:"handleChopCompletion",W_mine:"handleMineCompletion",W_harvest:"handleHarvestCompletion",W_deconstruct:"handleDeconstructCompletion",W_plant:"handlePlantCompletion",C_generic:"handleGenericCraftCompletion",BE_blockcutter:"handleBlockcutterCompletion",BE_bed:"handleBedCompletion",BE_door:"handleDoorCompletion"};class BlueprintManager{constructor(){this.blueprint_hashmap={}}addBluePrint(t){const e=t.getKey(),i=t.getKey()in this.blueprint_hashmap,n=t.is_invalidated();return!i&&!n&&(this.blueprint_hashmap[e]=t,!0)}get_blueprints_unnassigned_to_character(){const t=[],e={};for(const t of CHARACTERS)if(t.itinerary.blueprint){e[t.itinerary.blueprint.getKey()]=1}for(const i in this.blueprint_hashmap){const n=this.blueprint_hashmap[i];n.getKey()in e||t.push(n)}return t.length>25?chooseNRandomElements(t,25):t}removeInvalidBlueprints(){for(const t in this.blueprint_hashmap){this.blueprint_hashmap[t].is_invalidated()&&this.remove_blueprint_by_key(t)}}remove_blueprint_by_key(t){if(!(t in this.blueprint_hashmap))return;const e=this.blueprint_hashmap[t];for(const t of CHARACTERS)t.itinerary.blueprint==e&&t.itinerary.force_idle();delete this.blueprint_hashmap[t]}assign_job_to_a_dwarf(t){const e=this.get_blueprints_unnassigned_to_character().sort(((e,i)=>Math.abs(e.x-t.x)+Math.abs(e.y-t.y)-(Math.abs(i.x-t.x)+Math.abs(i.y-t.y))));for(const i of e){const e=i.BuildItineraryForDwarf(t);if(e)return void t.itinerary.set_itinerary(e,i)}}drawBluePrints(){for(const t in this.blueprint_hashmap){this.blueprint_hashmap[t].draw()}}}class ItemSet{constructor(){this.items_held={}}addItem(t,e){t in this.items_held?this.items_held[t]+=e:this.items_held[t]=e}removeItem(t,e){return t in this.items_held&&(!(this.items_held[t]<e)&&(this.items_held[t]-=e,!0))}getShoppingList(t){const e={};for(const i in t){const n=t[i],s=i in this.items_held?this.items_held[i]:0;s<n&&(e[i]=n-s)}return e}isEmpty(){for(const t in this.items_held)if(this.items_held[t]>0)return!1;return!0}give_list_of_items_held(){return structuredClone(this.items_held)}makeEmpty(){this.items_held={}}}var selectedTool=null,selectedToolCategory=null,selectedToolCache={},is_mouse_over=!1;function show_or_hide_tool_menu(){is_mouse_over||selectedTool?$("#tool_menu").removeClass("collapsed"):$("#tool_menu").addClass("collapsed")}$("#tool_menu").on("mouseenter",(t=>{is_mouse_over=!0,show_or_hide_tool_menu()})),$("#tool_menu").on("mouseleave",(t=>{is_mouse_over=!1,show_or_hide_tool_menu()})),document.addEventListener("keydown",(function(t){"q"!==t.key&&"Q"!==t.key||(selectedTool=null,$(".button-item").removeClass("active"),show_or_hide_tool_menu())})),$(".tool_tab").click((function(t){const e=$(this).attr("data-category");if(selectedToolCategory==e)return;selectedToolCategory=e,selectedTool=null,$(".tool_tab ").removeClass("active"),$(".button-item").removeClass("active"),$(this).addClass("active"),$(".button-list").hide(250);$(document.getElementById(selectedToolCategory)).show(250),selectedToolCategory in selectedToolCache&&$(".button-item[data-name='"+selectedToolCache[selectedToolCategory]+"']").click()})),$(".button-item").click((function(t){$(".button-item").removeClass("active");const e=$(this).attr("data-name");selectedTool===e?selectedTool=null:(selectedTool=e,$(this).addClass("active")),selectedToolCache[selectedToolCategory]=selectedTool}));let ALL_SELECTED=[],SELECTED_TAB=0;function render_menu_for_tiles_at(t,e){gather_all_selectables_on_tile(t,e);const i=$("#menu_offset").html('<div class = "menu-header" id = "rhs-tab-container">     </div>\n                         <div class = "menu-body"   id = "rhs-content-container"> </div>'),n=$("#rhs-tab-container");let s=0;for(const t of ALL_SELECTED){let e="";e=t instanceof Dwarf?"D":t instanceof Animal?"A":t instanceof GameEntity?"E":"Z",n.append($("<div>").addClass("tab").attr("ref",s).text(e).click(hook_subtab_click)),s++}n.append($("<div>").addClass("close-btn").text("x").click((function(){$("#menu_offset").hide()}))),ALL_SELECTED.length?(n.children().first().click(),i.show(),SELECTED_TAB=0):i.hide()}function gather_all_selectables_on_tile(t,e){ALL_SELECTED=[];for(const i of CHARACTERS)i.x==t&&i.y==e&&ALL_SELECTED.push(i);for(const i of ANIMAL_MANAGER.animals)i.x==t&&i.y==e&&ALL_SELECTED.push(i);GAME_MAP.getEntity(t,e)&&ALL_SELECTED.push(GAME_MAP.getEntity(t,e)),ZONE_MANAGER.getZoneAtTile(t,e)&&ALL_SELECTED.push(ZONE_MANAGER.getZoneAtTile(t,e))}function hook_subtab_click(){$(".menu-header").children().removeClass("active"),$(this).addClass("active"),SELECTED_TAB=parseInt($(this).attr("ref")),refresh_RHS_menu()}function refresh_RHS_menu(){const t=ALL_SELECTED[SELECTED_TAB];if(t){const e=t.render_details_menu();$("#rhs-content-container").empty().append(e)}}let TIME_FACTOR=1,PAUSED=!1;function set_pause_button_state(){PAUSED?$(".pause_button").addClass("active"):$(".pause_button").removeClass("active")}$(".time_button").click((function(){TIME_FACTOR=parseInt($(this).attr("time_factor")),$(".time_button").removeClass("active"),$(this).addClass("active")})),$(".pause_button").click((function(){PAUSED=!PAUSED,set_pause_button_state()})),document.addEventListener("keydown",(function(t){"Space"===t.code&&(PAUSED=!PAUSED,set_pause_button_state())}));class MovingEntity{constructor(t,e,i){this.x=t,this.y=e,this.sprite=i,this.alive=!0}render(){this.sprite||!(this.sprite in ALL_LOADED_SPRITES)?ALL_LOADED_SPRITES[this.sprite].render_sprite(this.x,this.y):(ctx.fillStyle=ctx.fillStyle="rgba(230, 30, 30, 1)",ctx.fillRect(this.x*TILE_SIZE+3-CAMERA_X,this.y*TILE_SIZE+3-CAMERA_Y,TILE_SIZE-6,TILE_SIZE-6))}render_details_menu(){return $("<div>")}attempt_set_position(t,e){return!!GAME_MAP.isWalkable(t,e)&&(this.x=t,this.y=e,!0)}}const MAX_THIRST=12e4,LOOK_FOR_WATER_IF_IDLE=6e4,LOOK_FOR_WATER_OVERRIDE=3e4,MAX_HUNGER=24e4,LOOK_FOR_FOOD_IF_IDLE=12e4,LOOK_FOR_FOOD_OVERRIDE=3e4,MAX_TIREDNESS=12e4,LOOK_FOR_REST_IF_IDLE=3e4;let NEED_SPEEDUP_FACTOR=1;class Needs{constructor(){this.thirst=12e4,this.hunger=24e4,this.tiredness=12e4}on_tick(t,e,i,n){this.thirst-=FrameTime.deltaT*NEED_SPEEDUP_FACTOR,this.hunger-=FrameTime.deltaT*NEED_SPEEDUP_FACTOR,this.tiredness-=FrameTime.deltaT*NEED_SPEEDUP_FACTOR;const s=t.get_last_task_key(),r=["DRINK","EAT"];this.thirst<3e4&&!r.includes(s)&&this.set_itinerary_to_manage_thirst(t,e,i)||this.hunger<3e4&&!r.includes(s)&&this.set_itinerary_to_manage_hunger(t,e,i)||this.thirst<6e4&&t.is_idle()&&this.set_itinerary_to_manage_thirst(t,e,i)||this.hunger<12e4&&t.is_idle()&&this.set_itinerary_to_manage_hunger(t,e,i)||this.tiredness<3e4&&t.is_idle()&&this.set_itinerary_to_manage_tiredness(t,e,i,n)}set_itinerary_to_manage_thirst(t,e,i){const n=GAME_MAP.get_closest_tile_of_type(e,i,"water");if(!n)return!1;const s=path_array_to_tasks(n),r=n.length?n[n.length-1]:{x:e,y:i};return s.push(new DwarvenTask("DRINK",r.x,r.y)),t.set_itinerary(s,null),!0}set_itinerary_to_manage_hunger(t,e,i){const n=GAME_MAP.getClosestFoodItem(e,i);if(!n)return!1;const s=path_array_to_tasks(n),r=n.length?n[n.length-1]:{x:e,y:i};return s.push(new DwarvenTask("PICKUP",r.x,r.y)),s.push(new DwarvenTask("EAT",r.x,r.y)),t.set_itinerary(s,null),!0}set_itinerary_to_manage_tiredness(t,e,i,n){const s=ZONE_MANAGER.getAllZones(),r=s.filter((t=>"bedroom"==t.zone_type&&t.is_zone_valid())),a=r.filter((t=>t.assigned_dwarf==n)),o=r.filter((t=>null==t.assigned_dwarf)),l=s.filter((t=>"dorm"==t.zone_type&&t.is_zone_valid())).flatMap((t=>t.getAllBedTileCoordinates()));for(const n of a){const s=n.getBedTileCoordinates();if(!s)continue;const r=PATHFINDING.findPath(e,i,s.x,s.y);if(!r)continue;const a=path_array_to_tasks(r);return a.push(new DwarvenTask("SLEEP",s.x,s.y)),t.set_itinerary(a,null),!0}for(const s of o){const r=s.getBedTileCoordinates();if(!r)continue;const a=PATHFINDING.findPath(e,i,r.x,r.y);if(!a)continue;const o=path_array_to_tasks(a);return o.push(new DwarvenTask("SLEEP",r.x,r.y)),t.set_itinerary(o,null),s.assigned_dwarf=n,!0}const _=getHashSetOfReservedTiles();for(const n of l){if(_.has(n.get_hash()))continue;const s=PATHFINDING.findPath(e,i,n.x,n.y);if(!s)continue;const r=path_array_to_tasks(s);return r.push(new DwarvenTask("SLEEP",n.x,n.y)),t.set_itinerary(r,null),!0}return!1}render(){const t=$("<div>").addClass("needs-container"),e=this._createNeedBar("Hydrated",this.thirst,12e4),i=this._createNeedBar("Fed",this.hunger,24e4),n=this._createNeedBar("Rested",this.tiredness,12e4);return t.append(e,i,n),t}_createNeedBar(t,e,i){const n=$("<div>").addClass("need-bar-container").attr("data-need-name",t),s=$("<div>").addClass("need-bar-label").text(t);n.append(s);const r=$("<div>").addClass("need-bar").attr("data-need-name",t),a=e/i*100;return r.css({width:`${a}%`,backgroundColor:(t=>{if(t>=50){const e=(t-50)/50;return`rgb(${Math.round(230-185*e)}, ${Math.round(230-130*e)}, 0)`}{const e=t/50;return`rgb(${Math.round(204+26*e)}, ${Math.round(0+230*e)}, 0)`}})(a)}),n.append(r),n}}class DwarvenTask{constructor(t,e,i,n=null){this.task_key=t,this.x=e,this.y=i,this.moving_entity=n}}class DwarfItinerary{constructor(){this.task_list=[],this.blueprint=null}set_itinerary(t,e){this.task_list_has_been_emptied(),this.task_list=t,this.blueprint=e}get_next_task(){return this.task_list.length?this.task_list[0]:null}get_last_task_key(){return this.task_list.length?this.task_list[this.task_list.length-1].task_key:null}shift(){this.task_list.shift(),this.task_list.length||this.task_list_has_been_emptied()}task_list_has_been_emptied(){this.blueprint=null}is_idle(){return 0==this.task_list.length}force_idle(){this.task_list=[],this.task_list_has_been_emptied()}}const TILES_PER_SECOND=7;class Dwarf extends MovingEntity{constructor(t,e){super(t,e,"dorf"),this.name=getRandomElement(PEOPLE_NAMES),this.needs=new Needs,this.inventory=new ItemSet,this.itinerary=new DwarfItinerary,this.banked_time=0}update_dwarf(){this.make_unstuck(),this.needs.on_tick(this.itinerary,this.x,this.y,this),this.undertake_task_if_exists(),this.itinerary.is_idle()&&(this.inventory.isEmpty()||GAME_MAP.dump_inventory(this.x,this.y,this.inventory),this.banked_time=0),this.itinerary.is_idle()}undertake_task_if_exists(){const t=this.itinerary.get_next_task();if(!t)return;null==t.moving_entity&&(Math.abs(this.x-t.x)>1||Math.abs(this.y-t.y)>1)&&this.itinerary.force_idle();const e=Dwarf.TASK_HANDLERS[t.task_key];e?this[e](t):this.itinerary.force_idle()}handleGoTo(t){this.banked_time+=FrameTime.deltaT;const e=1e3/7;this.banked_time>=e&&(this.attempt_set_position(t.x,t.y)?(this.itinerary.shift(),this.banked_time-=e):this.itinerary.force_idle())}handleGoToMovingEntity(t){this.banked_time+=FrameTime.deltaT;const e=1e3/7;if(this.banked_time>=e){const i=PATHFINDING.findPathExtended(this.x,this.y,t.moving_entity.x,t.moving_entity.y,!0);if(!i)return void this.itinerary.force_idle();this.banked_time-=e,0==i.length?this.itinerary.shift():(this.x=i[0].x,this.y=i[0].y)}}handleRopeAnimal(t){this.banked_time+=FrameTime.deltaT;const e=1e3/7;if(this.banked_time>=e){const i=PATHFINDING.findPath(this.x,this.y,t.x,t.y);if(!i)return void this.itinerary.force_idle();this.banked_time-=e,t.moving_entity.x=this.x,t.moving_entity.y=this.y,0==i.length?(this.itinerary.shift(),t.moving_entity.carry_to_zone=null,t.moving_entity.x=this.x,t.moving_entity.y=this.y):(t.moving_entity.x=this.x,t.moving_entity.y=this.y,this.x=i[0].x,this.y=i[0].y)}}handleDrink(t){"water"==GAME_MAP.getTile(this.x,this.y)&&(this.needs.thirst=12e4),this.itinerary.shift()}handleEat(t){this.needs.hunger=24e4,this.inventory.makeEmpty(),this.itinerary.shift()}handleChopWood(t){this.itinerary.blueprint&&this.itinerary.blueprint.have_dwarf_finish_blueprint(),this.itinerary.shift()}handlePickup(t){const e=GAME_MAP.getEntity(t.x,t.y);e instanceof ItemOnGround&&(this.inventory.addItem(e.item_id,e.item_count),GAME_MAP.setEntity(this.x,this.y,null)),this.itinerary.shift()}handleStockBlueprint(t){const e=this.itinerary.blueprint;if(null!==e){const t=e.inventory.getShoppingList(e.desired_inventory),i=this.inventory.give_list_of_items_held();for(const n in t){const s=t[n];if(i.hasOwnProperty(n)){const t=i[n],r=Math.min(t,s);this.inventory.removeItem(n,r),e.inventory.addItem(n,r)}}}this.itinerary.shift()}handleBuildOrCraft(t){const e=this.itinerary.blueprint;if(e&&e instanceof Blueprint){const t=e.inventory.getShoppingList(e.desired_inventory);0===Object.keys(t).length&&e.have_dwarf_finish_blueprint()}this.itinerary.shift()}handleDump(t){GAME_MAP.dump_inventory(this.x,this.y,this.inventory),this.itinerary.shift()}handleSleep(t){this.needs.tiredness=12e4,this.itinerary.shift()}handlePickupAndForgetBlueprint(t){const e=GAME_MAP.getEntity(t.x,t.y);e instanceof ItemOnGround&&(this.inventory.addItem(e.item_id,e.item_count),GAME_MAP.setEntity(this.x,this.y,null)),this.itinerary.blueprint=null,this.itinerary.shift()}handleSlaughter(t){t.moving_entity.handle_slaughter(),this.itinerary.shift()}make_unstuck(){if(GAME_MAP.getCostToMoveThroughTile(this.x,this.y)!==1/0)return;const t=[[0,1],[1,0],[0,-1],[-1,0]];for(const[e,i]of t){const t=this.x+e,n=this.y+i;if(isValidGridCoordinate(t,n)&&GAME_MAP.getCostToMoveThroughTile(t,n)!==1/0)return[this.x,this.y]=[t,n],void this.itinerary.force_idle()}}render_details_menu(){const t=$("<div>");return t.append("<h1>").text(this.name),t.append(this.needs.render()),t}render(){super.render(),this.render_itinerary()}render_itinerary(){if(0==this.itinerary.task_list.length||this.itinerary.task_list[0].moving_entity)return;ctx.strokeStyle="rgba(255, 255, 255, 0.25)",ctx.fillStyle="rgba(255, 255, 255, 0.25)";let[t,e]=[this.x,this.y];for(const i of this.itinerary.task_list)"GO_TO"==i.task_key?(ctx.beginPath(),ctx.moveTo((t+.5)*TILE_SIZE-CAMERA_X,(e+.5)*TILE_SIZE-CAMERA_Y),ctx.lineTo((i.x+.5)*TILE_SIZE-CAMERA_X,(i.y+.5)*TILE_SIZE-CAMERA_Y),ctx.stroke()):ctx.fillRect(i.x*TILE_SIZE+8-CAMERA_X,i.y*TILE_SIZE+8-CAMERA_Y,TILE_SIZE-16,TILE_SIZE-16),[t,e]=[i.x,i.y]}}Dwarf.TASK_HANDLERS={GO_TO:"handleGoTo",DRINK:"handleDrink",EAT:"handleEat",SLEEP:"handleSleep",CHOP_WOOD:"handleChopWood",PICKUP:"handlePickup",DUMP:"handleDump",PICKUP_AND_FORGET_BLUEPRINT:"handlePickupAndForgetBlueprint",STOCK_BLUEPRINT:"handleStockBlueprint",BUILD:"handleBuildOrCraft",CRAFT:"handleBuildOrCraft",BUILD_ENTITY:"handleBuildOrCraft",GO_TO_MOVING_ENTITY:"handleGoToMovingEntity",SLAUGHTER_ANIMAL:"handleSlaughter",CARRY_ANIMAL_TO_POINT:"handleRopeAnimal"};const ANIMAL_TILES_PER_SECOND=7/4,TIME_FOR_EGG_MAXIMUM=3e4;class Animal extends MovingEntity{constructor(t,e){super(t,e,"chicken"),this.banked_time=0,this.egg_time_elapsed=0,this.slaughter=!1,this.carry_to_zone=null}tick(){if(this.banked_time+=FrameTime.deltaT,this.banked_time>1e3/1.75){const t=DIRECTIONS[Math.floor(Math.random()*DIRECTIONS.length)];let e=this.x+t.x,i=this.y+t.y;(e<0||e>=GRID_WIDTH)&&(e=this.x),(i<0||i>=GRID_HEIGHT)&&(i=this.y);ZONE_MANAGER.getZoneAtTile(this.x,this.y)==ZONE_MANAGER.getZoneAtTile(e,i)&&this.attempt_set_position(e,i)&&(this.banked_time-=1e3/1.75)}this.egg_time_elapsed+=FrameTime.deltaT,this.egg_time_elapsed>=3e4&&(this.egg_time_elapsed-=3e4,GAME_MAP.dump_one_inventory_item(this.x,this.y,"egg",1));0==this.getDwarvesAssignedToThis().length&&(this.slaughter?this.assignDwarfToSlaughter():this.carry_to_zone&&this.assignDwarfToMoveAnimal())}getDwarvesAssignedToThis(){return CHARACTERS.filter((t=>t.itinerary.task_list.length&&t.itinerary.task_list[0].moving_entity==this))}assignDwarfToSlaughter(){for(const t of CHARACTERS)if(t.itinerary.is_idle()){const e=[new DwarvenTask("GO_TO_MOVING_ENTITY",null,null,this),new DwarvenTask("SLAUGHTER_ANIMAL",null,null,this)];return void t.itinerary.set_itinerary(e,null)}}assignDwarfToMoveAnimal(){for(const t of CHARACTERS)if(t.itinerary.is_idle()){const e=this.carry_to_zone.tiles[Math.floor(Math.random()*this.carry_to_zone.tiles.length)],i=[new DwarvenTask("GO_TO_MOVING_ENTITY",null,null,this),new DwarvenTask("CARRY_ANIMAL_TO_POINT",e.x,e.y,this)];return void t.itinerary.set_itinerary(i,null)}}handle_slaughter(){ANIMAL_MANAGER.animals=ANIMAL_MANAGER.animals.filter((t=>t!==this)),this.alive=!1}render_details_menu(){const t=$("<div>"),e=this.slaughter?"Cancel Slaughter":"Slaughter",i=$("<button>").text(e),n=this;return i.click((function(){n.slaughter=!n.slaughter})),t.append($("<br>"),$("<br>"),i),t}}class AnimalManager{constructor(){this.animals=[]}addAnimal(t,e){this.animals.push(new Animal(t,e))}tick(){this.animals.forEach((t=>t.tick()))}render(){this.animals.forEach((t=>t.render()))}}const ANIMAL_MANAGER=new AnimalManager;ANIMAL_MANAGER.addAnimal(15,12),ANIMAL_MANAGER.addAnimal(15,16),ANIMAL_MANAGER.addAnimal(15,10);class ZoneManager{constructor(){this.grid=Array(GRID_HEIGHT).fill(null).map((()=>Array(GRID_WIDTH).fill(0))),this.next_zone_id=1,this.zones={}}hook_add_zone(t,e){const i=[],n=new Set;for(const s of t)if(0==this.grid[s.y][s.x]){i.push(s);const t=s.getNeighbors();for(const i of t){const t=this.getZoneAtTile(i.x,i.y);t&&t.zone_type==e&&n.add(t)}}if(0==i.length)return;const s=Array.from(n).sort(((t,e)=>e.tiles.length-t.tiles.length));if(0==s.length){const t=this.next_zone_id;this.next_zone_id++,this.zones[t]=new Zone(t,e);for(const e of i)GAME_MAP.getCostToMoveThroughTile(e.x,e.y)<1/0&&(this.grid[e.y][e.x]=t,this.zones[t].tiles.push(e))}else if(1==s.length){const t=s[0];for(const e of i)GAME_MAP.getCostToMoveThroughTile(e.x,e.y)<1/0&&(this.grid[e.y][e.x]=t.id,t.tiles.push(e))}else if(s.length>1){const t=s[0],e=s.slice(1).flatMap((t=>t.tiles));for(let t=1;t<s.length;t++)delete this.zones[s[t].id];for(const n of[...i,...e])GAME_MAP.getCostToMoveThroughTile(n.x,n.y)<1/0&&(this.grid[n.y][n.x]=t.id,t.tiles.push(n))}}delete_tiles_from_zone_hook(t){this.crude_delete_from_zone(t),this.delete_non_contiguous_tiles_from_zones(),this.delete_zones_with_no_members()}crude_delete_from_zone(t){for(const e of t){const t=this.grid[e.y][e.x];t&&(this.grid[e.y][e.x]=0,this.zones[t].tiles=this.zones[t].tiles.filter((t=>!(e.x==t.x&&e.y==t.y))))}}delete_zones_with_no_members(){for(const t in this.zones){0==this.zones[t].tiles.length&&delete this.zones[t]}}delete_non_contiguous_tiles_from_zones(){for(const t in this.zones){const e=this.zones[t].splitIntoContiguousGroups();if(e.length>1){const t=e.slice(1).flat();this.crude_delete_from_zone(t)}}}iterate_over_zones_tick(){for(const t in this.zones){this.zones[t].tick()}}grid_location_is_stockpile(t,e){if(0==this.grid[e][t])return!1;const i=this.getZoneAtTile(t,e);return"stockpile"===i.zone_type||"p_stockpile"===i.zone_type}getZoneAtTile(t,e){const i=this.grid[e][t];return 0==i?null:i in this.zones?this.zones[i]:null}getClosestEmptyStockpileLocations(t,e){const i=Object.values(this.zones).filter((t=>"stockpile"==t.zone_type||"p_stockpile"==t.zone_type)).flatMap((t=>t.tiles)).filter((t=>null==GAME_MAP.getEntity(t.x,t.y)));if(0===i.length)return null;let n=null,s=1/0;for(const r of i){const i=r.x-t,a=r.y-e,o=Math.sqrt(i*i+a*a);o<s&&(s=o,n=r)}return n}getAllZones(){return Object.values(this.zones)}draw_zones(){for(let t=0;t<GRID_HEIGHT;t++)for(let e=0;e<GRID_WIDTH;e++)this.render_single_tile(e,t)}render_single_tile(t,e){if(0==this.grid[e][t])return;const i=this.getZoneAtTile(t,e).zone_type,n=this.getZoneAtTile(t,e);"stockpile"==i&&(ctx.fillStyle="rgba(125, 125, 255, 0.1)",ctx.strokeStyle="rgba(125, 125, 255, 0.8)"),"p_stockpile"==i?(ctx.fillStyle="rgba(125, 125, 255, 0.1)",ctx.strokeStyle="rgba(125, 125, 255, 0.6)"):"grow"==i?(ctx.fillStyle="rgba(125, 255, 125, 0.1)",ctx.strokeStyle="rgba(125, 255, 125, 0.8)"):n.is_zone_valid()?(ctx.fillStyle="rgba(255, 255, 255, 0.1)",ctx.strokeStyle="rgba(255, 255, 255, 0.8)"):(ctx.fillStyle="rgba(255, 0, 0, 0.2)",ctx.strokeStyle="rgba(255, 0, 0, 0.8)");const s=this.grid[e][t];ctx.fillRect(t*TILE_SIZE-CAMERA_X,e*TILE_SIZE-CAMERA_Y,TILE_SIZE,TILE_SIZE),ctx.lineWidth=1,e>0&&this.grid[e-1][t]!==s&&(ctx.beginPath(),ctx.moveTo(t*TILE_SIZE-CAMERA_X,e*TILE_SIZE-CAMERA_Y),ctx.lineTo((t+1)*TILE_SIZE-CAMERA_X,e*TILE_SIZE-CAMERA_Y),ctx.stroke()),e<GRID_HEIGHT-1&&this.grid[e+1][t]!==s&&(ctx.beginPath(),ctx.moveTo(t*TILE_SIZE-CAMERA_X,(e+1)*TILE_SIZE-CAMERA_Y),ctx.lineTo((t+1)*TILE_SIZE-CAMERA_X,(e+1)*TILE_SIZE-CAMERA_Y),ctx.stroke()),t>0&&this.grid[e][t-1]!==s&&(ctx.beginPath(),ctx.moveTo(t*TILE_SIZE-CAMERA_X,e*TILE_SIZE-CAMERA_Y),ctx.lineTo(t*TILE_SIZE-CAMERA_X,(e+1)*TILE_SIZE-CAMERA_Y),ctx.stroke()),t<GRID_WIDTH-1&&this.grid[e][t+1]!==s&&(ctx.beginPath(),ctx.moveTo((t+1)*TILE_SIZE-CAMERA_X,e*TILE_SIZE-CAMERA_Y),ctx.lineTo((t+1)*TILE_SIZE-CAMERA_X,(e+1)*TILE_SIZE-CAMERA_Y),ctx.stroke())}}const ZONE_MANAGER=new ZoneManager;class Zone{constructor(t,e){this.id=t,this.tiles=[],this.zone_type=e,this.name=prettify(e),this.zone_complaints=[],this.assigned_dwarf=null}static zone_factory_method(t,e){}tick(){if("stockpile"==this.zone_type)for(const t of this.tiles)null==GAME_MAP.getEntity(t.x,t.y)&&BLUEPRINT_MANAGER.addBluePrint(new Blueprint(t.x,t.y,"W_stockpile"));else if("grow"==this.zone_type)for(const t of this.tiles){const e=GAME_MAP.getEntity(t.x,t.y);null==e?BLUEPRINT_MANAGER.addBluePrint(new Blueprint(t.x,t.y,"W_plant")):e instanceof CropEntity&&e.is_harvestable&&BLUEPRINT_MANAGER.addBluePrint(new Blueprint(t.x,t.y,"W_harvest"))}this.getTilesNeighboring()}is_zone_valid(){return this.zone_complaints=[],("bedroom"==this.zone_type||"dorm"==this.zone_type)&&(this.isSurroundedByWalls()||this.zone_complaints.push("Not Surrounded By Walls"),this.hasBed()||this.zone_complaints.push("No Bed")),0==this.zone_complaints.length}is_tile_in_zone(t,e){for(const i of this.tiles)if(i.x==t&&i.y==e)return!0;return!1}splitIntoContiguousGroups(){if(0===this.tiles.length)return[];const t=[],e=new Set;for(const i of this.tiles){if(e.has(i))continue;const n=[i];e.add(i);let s=0;for(;s<n.length;){const t=n[s],i=this.getTileNextTo(t);for(const t of i)e.has(t)||(n.push(t),e.add(t));s++}t.push(n)}return t}getTilesNeighboring(){const t=[],e=new Set;for(const t of this.tiles)e.add(t.get_hash());for(const i of this.tiles)for(const n of i.getNeighbors())e.has(n.get_hash())||t.push(n);return t}isSurroundedByWalls(){const t=this.getTilesNeighboring();for(const e of t)if(!(null!==GAME_MAP.getWall(e.x,e.y)||GAME_MAP.getEntity(e.x,e.y)instanceof DoorEntity))return!1;return!0}getBedTileCoordinates(){for(const t of this.tiles){if(GAME_MAP.getEntity(t.x,t.y)instanceof BedEntity)return t}return null}getAllBedTileCoordinates(){const t=[];for(const e of this.tiles){GAME_MAP.getEntity(e.x,e.y)instanceof BedEntity&&t.push(e)}return t}getGameEntitiesInZone(){const t=[];for(const e of this.tiles){const i=GAME_MAP.getEntity(e.x,e.y);i&&t.push(i)}return t}hasBed(){return this.getGameEntitiesInZone().some((t=>t instanceof BedEntity))}getTileNextTo(t){const e=[];for(const i of this.tiles)i!==t&&(1===Math.abs(i.x-t.x)&&i.y===t.y||1===Math.abs(i.y-t.y)&&i.x===t.x)&&e.push(i);return e}render_details_menu(){const t=$("<div>"),e=$("<span>").text(this.name).attr("id","rhs_zone_name"),i=$("<input>").attr("id","rhs_zone_name_input").val(this.name).hide(),n=$("<button>").text("Rename").attr("id","rhs_zone_edit"),s=$("<button>").text("Save Changes").attr("id","rhs_zone_save").hide(),r=this;if(n.click((function(){e.hide(),n.hide(),i.show(),s.show()})),s.click((function(){e.show(),n.show(),i.hide(),s.hide(),r.name=i.val(),e.text(i.val())})),t.append(e,i,n,s),"pasture"==this.zone_type){const e=$("<div>"),i=[],n=[];for(const t of ANIMAL_MANAGER.animals)this.is_tile_in_zone(t.x,t.y)?i.push(t):n.push(t);const s=$("<div>").text("In Pasture"),r=$("<div>").text("Outside Pasture");for(const t of i){const e="url("+t.sprite.img.src+")",i=$("<div>").css("background-image",e).addClass("animal_icon");s.append($("<br>"),i)}for(const t of n){const e="url("+t.sprite.img.src+")",i=$("<div>").css("background-image",e).addClass("animal_icon"),n=$("<button>").text("Move"),s=this,a=t;n.click((function(){a.carry_to_zone=s})),r.append($("<br>"),i,n)}e.append(s,r),t.append(e)}if("bedroom"==this.zone_type){const e=$("<select>"),i=$("<option>").text("---").data("dwarf",null);null==this.assigned_dwarf&&i.attr("selected","selected"),e.append(i);for(const t of CHARACTERS){const i=$("<option>").text(t.name).data("dwarf",t);this.assigned_dwarf==t&&i.attr("selected","selected"),e.append(i)}const n=this;e.change((function(t){const e=t.currentTarget,i=e.children[e.selectedIndex],s=$(i).data("dwarf");n.assigned_dwarf=s})),t.append($("<br>"),e,$("<br>"))}if(this.zone_complaints){const e=$("<ul>").addClass("complaints-list");$.each(this.zone_complaints,(function(t,i){const n=$("<li>").text(i+" ");e.append(n)})),t.append(e)}return t}}const GAME_MAP=new GameMap,PATHFINDING=new Pathfinding,BLUEPRINT_MANAGER=new BlueprintManager,ITEM_CACHE=new ItemCache,CHARACTERS=[new Dwarf(3,3),new Dwarf(6,6),new Dwarf(9,9),new Dwarf(12,12)],canvas=document.getElementById("gameCanvas");$(canvas).attr("height",CANVAS_HEIGHT).attr("width",CANVAS_WIDTH);const ctx=canvas.getContext("2d",{alpha:!1});var CAMERA_X=0,CAMERA_Y=0;const MAXIMUM_CAMERA_X=GRID_WIDTH*TILE_SIZE-CANVAS_WIDTH,MAXIMUM_CAMERA_Y=GRID_HEIGHT*TILE_SIZE-CANVAS_HEIGHT;let cameraVelocities={x:0,y:0};const MAX_CAMERA_SPEED=3,ACCELERATION=.25,DECELERATION=.5,keyState={w:!1,s:!1,a:!1,d:!1};function updateCameraMovement(){keyState.w?cameraVelocities.y=Math.max(cameraVelocities.y-ACCELERATION*FrameTime.deltaTRaw,-MAX_CAMERA_SPEED):keyState.s?cameraVelocities.y=Math.min(cameraVelocities.y+ACCELERATION*FrameTime.deltaTRaw,MAX_CAMERA_SPEED):cameraVelocities.y=cameraVelocities.y>0?Math.max(cameraVelocities.y-DECELERATION*FrameTime.deltaTRaw,0):Math.min(cameraVelocities.y+DECELERATION*FrameTime.deltaTRaw,0),keyState.a?cameraVelocities.x=Math.max(cameraVelocities.x-ACCELERATION*FrameTime.deltaTRaw,-MAX_CAMERA_SPEED):keyState.d?cameraVelocities.x=Math.min(cameraVelocities.x+ACCELERATION*FrameTime.deltaTRaw,MAX_CAMERA_SPEED):cameraVelocities.x=cameraVelocities.x>0?Math.max(cameraVelocities.x-DECELERATION*FrameTime.deltaTRaw,0):Math.min(cameraVelocities.x+DECELERATION*FrameTime.deltaTRaw,0),CAMERA_X+=cameraVelocities.x*FrameTime.deltaTRaw,CAMERA_Y+=cameraVelocities.y*FrameTime.deltaTRaw,CAMERA_X=Math.max(0,Math.min(CAMERA_X,MAXIMUM_CAMERA_X)),CAMERA_Y=Math.max(0,Math.min(CAMERA_Y,MAXIMUM_CAMERA_Y)),CAMERA_X=Math.floor(CAMERA_X),CAMERA_Y=Math.floor(CAMERA_Y)}document.addEventListener("keydown",(t=>{switch(t.key){case"w":keyState.w=!0;break;case"s":keyState.s=!0;break;case"a":keyState.a=!0;break;case"d":keyState.d=!0}})),document.addEventListener("keyup",(t=>{switch(t.key){case"w":keyState.w=!1;break;case"s":keyState.s=!1;break;case"a":keyState.a=!1;break;case"d":keyState.d=!1}})),canvas.addEventListener("mousedown",handleLeftButtonDown),canvas.addEventListener("mouseup",handleLeftButtonUp),canvas.addEventListener("mouseenter",(function(t){const e=canvas.getBoundingClientRect(),i=t.clientX-e.left+CAMERA_X,n=t.clientY-e.top+CAMERA_Y,s=Math.floor(i/TILE_SIZE),r=Math.floor(n/TILE_SIZE);mouse_currently_over={x:s,y:r}})),canvas.addEventListener("mouseleave",(function(t){dragging=!1,tile_start_selection=null,mouse_currently_over=null}));var dragging=!1,tile_start_selection=null,mouse_currently_over=null;function handleLeftButtonDown(t){if(0!=t.button)return;const e=canvas.getBoundingClientRect(),i=t.clientX-e.left+CAMERA_X,n=t.clientY-e.top+CAMERA_Y,s=Math.floor(i/TILE_SIZE),r=Math.floor(n/TILE_SIZE);dragging=!0,tile_start_selection={x:s,y:r},mouse_currently_over={x:s,y:r}}function handleLeftButtonUp(t){if(0!=t.button)return;const e=canvas.getBoundingClientRect(),i=t.clientX-e.left+CAMERA_X,n=t.clientY-e.top+CAMERA_Y,s=Math.floor(i/TILE_SIZE),r=Math.floor(n/TILE_SIZE);if(selectedTool){if(dragging&&tile_start_selection){const e=getGridTilesBetween(tile_start_selection.x,tile_start_selection.y,s,r);if("zones"==selectedToolCategory&&selectedTool)"delete_zone"==selectedTool?ZONE_MANAGER.delete_tiles_from_zone_hook(e):ZONE_MANAGER.hook_add_zone(e,selectedTool);else if("entities"==selectedToolCategory)handleLeftClickPlaceEntityBlueprint(s,r,selectedTool);else if("orders"==selectedToolCategory)for(const t of e)handleLeftClickMakeLabourBlueprint(t.x,t.y,selectedTool);else for(const i of e)leftClickOnTile(i.x,i.y,t.shiftKey)}}else render_menu_for_tiles_at(s,r);dragging=!1,tile_start_selection=null}function handleLeftClickPlaceEntityBlueprint(t,e,i){const n={bed:(t,e)=>BLUEPRINT_MANAGER.addBluePrint(new Blueprint(t,e,"BE_bed")),blockcutter:(t,e)=>BLUEPRINT_MANAGER.addBluePrint(new Blueprint(t,e,"BE_blockcutter")),door:(t,e)=>BLUEPRINT_MANAGER.addBluePrint(new Blueprint(t,e,"BE_door"))},s=n[i];s&&s(t,e)}function handleLeftClickMakeLabourBlueprint(t,e,i){const n={chop:(t,e)=>BLUEPRINT_MANAGER.addBluePrint(new Blueprint(t,e,"W_chop")),mine:(t,e)=>BLUEPRINT_MANAGER.addBluePrint(new Blueprint(t,e,"W_mine")),harvest:(t,e)=>BLUEPRINT_MANAGER.addBluePrint(new Blueprint(t,e,"W_harvest")),deconstruct:(t,e)=>BLUEPRINT_MANAGER.addBluePrint(new Blueprint(t,e,"W_deconstruct")),haul:(t,e)=>BLUEPRINT_MANAGER.addBluePrint(new Blueprint(t,e,"W_haul")),cancel:(t,e)=>BLUEPRINT_MANAGER.remove_blueprint_by_key(t+" "+e)},s=n[i];s&&s(t,e)}function highlight_selected_tiles(){if(dragging&&tile_start_selection&&mouse_currently_over){const t=getGridTilesBetween(tile_start_selection.x,tile_start_selection.y,mouse_currently_over.x,mouse_currently_over.y);for(const e of t)ctx.fillStyle="rgba(255, 255, 255, 0.5)",ctx.fillRect(e.x*TILE_SIZE-CAMERA_X,e.y*TILE_SIZE-CAMERA_Y,TILE_SIZE,TILE_SIZE)}}function handleRightClick(t){t.preventDefault();const e=canvas.getBoundingClientRect(),i=t.clientX-e.left,n=t.clientY-e.top;Math.floor(i/TILE_SIZE),Math.floor(n/TILE_SIZE)}function leftClickOnTile(t,e,i){"floors"==selectedToolCategory&&null!==selectedTool?GAME_MAP.setTile(t,e,selectedTool):"build"==selectedToolCategory&&null!==selectedTool&&BLUEPRINT_MANAGER.addBluePrint(new Blueprint(t,e,selectedTool))}canvas.addEventListener("mousemove",(function(t){const e=canvas.getBoundingClientRect(),i=t.clientX-e.left+CAMERA_X,n=t.clientY-e.top+CAMERA_Y,s=Math.floor(i/TILE_SIZE),r=Math.floor(n/TILE_SIZE);mouse_currently_over={x:s,y:r}})),canvas.addEventListener("contextmenu",handleRightClick);const helpButton=document.getElementById("helpButton"),helpOverlay=document.getElementById("helpOverlay"),closeButton=document.getElementById("closeHelpButton");function gameLoop(){PAUSED||(FrameTime.updateDeltaT(),PATHFINDING.populate_passibility_array(),assignBlueprintsToIdleDwarfs(),updateCharacters(),GAME_MAP.update_all_entities(),BLUEPRINT_MANAGER.removeInvalidBlueprints(),ZONE_MANAGER.iterate_over_zones_tick(),INDOOR_REGIONS.update_state(),CALENDAR.update(),ANIMAL_MANAGER.tick()),updateCameraMovement(),call_all_draw_functions(),window.requestAnimationFrame(gameLoop)}function checkDeviceAndThrowError(){let t=!1;if(/Mobi|Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)&&(t=!0),t)throw $("#loading_screen").text("Dorflike is meant to be played on a Desktop"),new Error("Mobile devices are not supported.")}function call_all_draw_functions(){ctx.clearRect(0,0,canvas.width,canvas.height),GAME_MAP.render_tiles(),ZONE_MANAGER.draw_zones(),GAME_MAP.render_entities(),BLUEPRINT_MANAGER.drawBluePrints(),ANIMAL_MANAGER.render(),drawCharacters(),INDOOR_REGIONS.draw(),highlight_selected_tiles(),CALENDAR.print_readable_text(),CALENDAR.render_overlay(),mouse_currently_over&&(ctx.strokeStyle="rgba(15, 15, 125, 0.8)",ctx.strokeRect(mouse_currently_over.x*TILE_SIZE-CAMERA_X,mouse_currently_over.y*TILE_SIZE-CAMERA_Y,TILE_SIZE,TILE_SIZE))}function drawCharacters(){for(const t of Object.values(CHARACTERS))t.render()}function assignBlueprintsToIdleDwarfs(){ITEM_CACHE.buildCache();for(const t of CHARACTERS)t.itinerary.is_idle()&&BLUEPRINT_MANAGER.assign_job_to_a_dwarf(t)}function updateCharacters(){for(const t of CHARACTERS)t.update_dwarf()}helpButton.addEventListener("click",(function(){helpOverlay.style.display="block"})),closeButton.addEventListener("click",(function(){helpOverlay.style.display="none"})),checkDeviceAndThrowError(),loadAllImagesAndLaunch().then((function(){document.getElementById("loading_screen").style.opacity="0",document.getElementById("loading_screen").style.pointerEvents="none",gameLoop()})).catch((t=>{}));